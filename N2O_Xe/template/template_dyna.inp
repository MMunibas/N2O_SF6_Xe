* GENERATED BY ME
* INPUT FILE FOR EQUILIBRATION OF XE
* 

!#########################################
! Setup System
!#########################################

! Read topology and parameter files
read rtf   card name   SLVL.top
read rtf   card name   n2o.top append
read param card name   SLVL.par
read param card name   n2o.par append

! Read PSF
open read unit 10 card name ISYS.psf
read psf  unit 10 card xplor

! Read CRD
open read unit 10 card name ISYS.crd
read coor unit 10 card

!#########################################
! Setup PBC (Periodic Boundary Condition)
!#########################################

open read unit 10 card name crystal_image.str
set bsiz = AAA
crystal defi cubic @bsiz @bsiz @bsiz 90. 90. 90.
crystal build nope 0
image byres xcen 0.0 ycen 0.0 zcen 0.0 sele all end

!#########################################
! Non-bonding setup
!#########################################

OPEN UNIT 40 CARD READ NAME n2o_SLVL.dcm
DCM IUDCM 40 TSHIFT
CLOSE UNIT 40

NBONDS  ATOM  FSHIFT CDIE  VDW VSHIFT  -
        CUTNB 14.0  CTOFNB 12.0 CTONNB 10.0  WMIN 1.5  EPS 1.0

!#########################################
! Additional setup
!#########################################

! Block Solvent-Solvent electrostatic for proper pVT behaviour
block 2
  call 2 sele resname SLVU end
  coeff 2 2 1.0 elec 0.0
end

!#########################################
! Setup Parameters
!#########################################

set nn2o = NNN

set dt = TDT

set tmin = TMN
set temp = TTT
set thrm = THM                                  ! Nose Thermostate
scalar fbeta set FBT sele .not. resname N2O end ! Langevin

set heatstep = HTS
set nverstep = CES
set equistep = EQS

set ndyna = NDY
set dynastep = DYS

set nsave = NSV


!#########################################
! Constraints
!#########################################

!set n 1
!label loop_cons
!  
!  calc m @n+1
!  cons hmcm force 100.0 refx 0.0 refy 0.0 refz 0.0 sele bynu @m end
!  
!  increase n by 1
!if n le @nn2o goto loop_cons

!#########################################
! Minimization
!#########################################

set mini 0
if @mini .eq. 0 then

set n 1
label loop_edit

  ic edit
  dist @n N1 @n N2 1.1278
  dist @n O3 @n N2 1.1864
  angle @n N1 @n N2 @n O3 180.0
  end

  increase n by 1
if n le @nn2o goto loop_edit

ic print

const ic bond 100.0 angle 100.0

open write unit 32 file name abnr_mini_cons.dcd

mini abnr nstep 1000 nprint 100 nsavc 10 iuncrd 32

ic delete bond first sele type N1 end
ic delete bond first sele type N2 end
ic delete angle first sele type O3 end
const ic

energy

open write unit 32 file name abnr_mini_free.dcd

mini abnr nstep 1000 nprint 100 nsavc 10 iuncrd 32

open write unit 10 card name mini.pdb
write coor unit 10 pdb

endif

!#########################################
! Heating
!#########################################

set heat 0
if @heat .eq. 0 then

open write unit 12 card name heat.res
open write unit 13 file name heat.dcd

dyna leap start timestep @dt nstep @heatstep -
     nprint 1000 iprfrq 1000 ntrfrq 500 -
     iunread -1 iunwri 12 iuncrd 13 iunvel -1 iunxyz -1 kunit -1 -
     nsavc 1000 -
     firstt @tmin finalt @temp tbath @temp -
     ihtfrq 1000 teminc 5 ieqfrq 0

open write unit 10 card name heat.pdb
write coor unit 10 pdb

open write unit 10 card name heat.crd
write coor unit 10 card

close unit 12
close unit 13

endif


!#########################################
! Set N2O velocities
!#########################################

! Read velocities

! Constraint minimization of N2O residues
cons fix sele .not. resname N2O end
mini conj nstep 100
cons fix sele none end

! Read velocities
open read unit 11 card name heat.res
read coor dynr vel unit 11 COMP
close unit 11

! Loop over N2O residues
set n 1
label loop_velocities
  
  ! Read N2O positions
  coor stat sele resname N2O .and. resid @n .and. type N1 end
  set XN1 ?XAVE
  set YN1 ?YAVE
  set ZN1 ?ZAVE
  coor stat sele resname N2O .and. resid @n .and. type N2 end
  set XN2 ?XAVE
  set YN2 ?YAVE
  set ZN2 ?ZAVE
  coor stat sele resname N2O .and. resid @n .and. type O3 end
  set XO3 ?XAVE
  set YO3 ?YAVE
  set ZO3 ?ZAVE
  
  ! Compute local axis frame in assumption of ~180Â° N-N-O angle
  ! Unit vector N1->N2
  calc UX12 = @XN2 - @XN1
  calc UY12 = @YN2 - @YN1
  calc UZ12 = @ZN2 - @ZN1
  calc LN1N2 = @UX12*@UX12 + @UY12*@UY12 + @UZ12*@UZ12
  calc LN1N2 = SQRT(@LN1N2)
  calc UX12 = @UX12/@LN1N2
  calc UY12 = @UY12/@LN1N2
  calc UZ12 = @UZ12/@LN1N2
  
  ! Orthogonal axis 1 to N1->N2
  calc O1X12 = @UY12*1.0 - @UZ12*0.0
  calc O1Y12 = @UZ12*0.0 - @UX12*1.0
  calc O1Z12 = @UX12*0.0 - @UY12*0.0
  calc LO1 = @O1X12*@O1X12 + @O1Y12*@O1Y12 + @O1Z12*@O1Z12
  calc LO1 = SQRT(@LO1)
  calc O1X12 = @O1X12/@LO1
  calc O1Y12 = @O1Y12/@LO1
  calc O1Z12 = @O1Z12/@LO1
  
  ! Orthogonal axis 2 to N1->N2
  calc O2X12 = @UY12*@O1Z12 - @UZ12*@O1Y12
  calc O2Y12 = @UZ12*@O1X12 - @UX12*@O1Z12
  calc O2Z12 = @UX12*@O1Y12 - @UY12*@O1X12
  
  ! Velocities in local axis frame to assign in Cartesian axis frame
  set LVXN1 {LVXN1}
  set LVYN1 {LVYN1}
  set LVZN1 {LVZN1}
  set LVXN2 {LVXN2}
  set LVYN2 {LVYN2}
  set LVZN2 {LVZN2}
  set LVXO3 {LVXO3}
  set LVYO3 {LVYO3}
  set LVZO3 {LVZO3}
  
  ! Convert local velocities to Cartesian velocities
  ! X - O1, Y - O2, Z - U
  calc CVXN1 = @O1X12*@LVXN1 + @O2X12*@LVYN1 + @UX12*@LVZN1
  calc CVYN1 = @O1Y12*@LVXN1 + @O2Y12*@LVYN1 + @UY12*@LVZN1
  calc CVZN1 = @O1Z12*@LVXN1 + @O2Z12*@LVYN1 + @UZ12*@LVZN1
  calc CVXN2 = @O1X12*@LVXN2 + @O2X12*@LVYN2 + @UX12*@LVZN2
  calc CVYN2 = @O1Y12*@LVXN2 + @O2Y12*@LVYN2 + @UY12*@LVZN2
  calc CVZN2 = @O1Z12*@LVXN2 + @O2Z12*@LVYN2 + @UZ12*@LVZN2
  calc CVXO3 = @O1X12*@LVXO3 + @O2X12*@LVYO3 + @UX12*@LVZO3
  calc CVYO3 = @O1Y12*@LVXO3 + @O2Y12*@LVYO3 + @UY12*@LVZO3
  calc CVZO3 = @O1Z12*@LVXO3 + @O2Z12*@LVYO3 + @UZ12*@LVZO3
  
  ! Assign Cartesian velocities
  coor set xdir  @CVXN1 ydir @CVYN1 zdir @CVZN1 -
    sele resname N2O .and. resid @n .and. TYPE N1 end COMP
  coor set xdir  @CVXN2 ydir @CVYN2 zdir @CVZN2 -
    sele resname N2O .and. resid @n .and. type N2 end COMP
  coor set xdir  @CVXO3 ydir @CVYO3 zdir @CVZO3 -
    sele resname N2O .and. resid @n .and. type O3 end COMP

  increase n by 1
if n le @nn2o goto loop_velocities

!#########################################
! Equilibration
!#########################################

set equi 0
if @equi .eq. 0 then

open write unit 12 card name equi.res
open write unit 13 file name equi.dcd

dyna leap langevin start timestep @dt nstep @equistep -
     nprint 1000 iprfrq 1000 ntrfrq 500 -
     inbfrq -1 imgfrq 50 ilbfrq 50 -
     iunread -1 iunwri 12 iuncrd 13 iunvel -1 iunxyz -1 kunit -1 -
     tbath @temp iasors 1 iasvel 0 ihtfrq 0 -
     nsavc 1000

open write unit 10 card name equi.pdb
write coor unit 10 pdb

open write unit 10 card name equi.crd
write coor unit 10 card

close unit 11
close unit 12
close unit 13

endif

!#########################################
! Production
!#########################################

set ndcd 0
label loop

if @ndcd .eq. 0 then
  set m @ndcd
  open read unit 11 card name equi.res
  open write unit 12 card name dyna.@ndcd.res
  open write unit 13 file name dyna_crd.@ndcd.dcd
  open write unit 14 file name dyna_vel.@ndcd.dcd
else
  calc m @ndcd-1
  open read unit 11 card name dyna.@m.res
  open write unit 12 card name dyna.@ndcd.res
  open write unit 13 file name dyna_crd.@ndcd.dcd
  open write unit 14 file name dyna_vel.@ndcd.dcd
endif

dyna leap langevin restart time @dt nstep @dynastep -
     nprint 1000 iprfrq 1000 ntrfrq 500 -
     inbfrq -1 imgfrq 50 -
     iunread 11 iunwri 12 iuncrd 13 iunvel 14 kunit -1 -
     nsavc @nsave nsavv @nsave -
     tbath @temp finalt @temp ihtfrq 0 -
     iasors 0 ihtfrq 0 -
     ieqfrq 0 ichecw 0

open unit 10 write card name dyna.@ndcd.crd
write coor card unit 10
close unit 10

open write unit 10 card name dyna.@ndcd.pdb
write coor unit 10 pdb
close unit 10

close unit 11
close unit 12
close unit 13
close unit 14

increase ndcd by 1
if ndcd lt @ndyna goto loop

stop
